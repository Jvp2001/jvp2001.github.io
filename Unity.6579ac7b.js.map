{"mappings":"AAAO,MAQMA,EACT,CACIC,MAAO,CACHC,MAAO,CACH,CACIC,KAAM,YACNC,KAAK,CAAEC,KAAM,SAAUC,MAAO,YAC9BC,MAAO,CACHJ,KAAM,iBACNK,MAAO,CAAEC,KAAM,CAAEC,MAAO,IAAKC,OAAQ,KAAMC,IAAK,aAKxD,CAEIT,KAAM,WACNC,KAAM,CAAEC,KAAM,SAAUC,MAAO,WAC/BC,MAAO,CACHJ,KAAM,wBACNK,MAAO,CAACC,KAAM,CAAEC,MAAO,IAAKC,OAAQ,KAAMC,IAAK,cAI3DC,UA5BR,CACIC,cAAe,8BACfC,SAAU,kFCClB,IAAIC,EAOJ,SAASC,EAAkBC,EAA4BC,GAEnD,MAAMC,EAAOC,SAASC,cAAc,OACpCF,EAAKG,UAAUC,IAAI,QAAS,iBAE5B,MAAMC,EAAUJ,SAASC,cAAc,WACvCG,EAAQF,UAAUC,IAAI,QAEtB,MAAME,EAAOL,SAASC,cAAc,KACpCI,EAAKC,KAAO,GAAGT,EAAKJ,iBAAiBK,EAASf,KAAKE,QAEnD,MAAMsB,EAAUP,SAASC,cAAc,OACvCM,EAAOC,IAAM,GAAGX,EAAKH,YAAYI,EAASZ,MAAMJ,OAChDyB,EAAOpB,MAAME,MAAQ,OACrBkB,EAAOpB,MAAMG,OAAS,GAAGQ,EAASZ,MAAMC,MAAMG,WACpCiB,EAAOpB,MAAMsB,UAAYX,EAASZ,MAAMC,MAAMI,KAAO,QAC/D,MAAMmB,EAASV,SAASC,cAAc,UAEhCU,EAAQX,SAASC,cAAc,MAQrC,OAPAU,EAAMC,YAAcd,EAAShB,KAC7B4B,EAAOG,OAAOF,GAEdN,EAAKQ,OAAON,EAAQG,GACpBN,EAAQS,OAAOR,GACfN,EAAKc,OAAOT,GAELL,CAGX,CA2BAC,SAASc,iBAAiB,oBAP1B,WAEInB,EAAYK,SAASe,cAAc,mCACnCC,QAAQC,IAAI,uBAAqC,MAAbtB,GApBxC,SAAyBuB,GAErBF,QAAQC,IAAIC,GACZ,MAAM1B,UAACA,EAASX,MAAEA,GAASqC,EACrBrB,EAAOL,GAAa,CAACC,cAAe,GAAIC,SAAU,IAClDyB,EAAMnB,SAASC,cAAc,OACnCkB,EAAIjB,UAAUC,IAAI,OAClBa,QAAQC,IAAIpC,GACZ,IAAK,MAAMuC,KAAQvC,EAEfsC,EAAIN,OAAOjB,EAAkBC,EAAMuB,IAEvCJ,QAAQC,IAAI,uBAAqC,MAAbtB,GACpCA,EAAUkB,OAAOM,EACrB,CAOIE,CAAgB1C,EAAkBC,MACtC","sources":["src/scripts/Config.ts","src/scripts/EnginePage.ts"],"sourcesContent":["export const config: PortfolioConfig = {titleHeading: {content: \"Joshua Petersen\"}}\n\n\nexport const defaultPageVariables: EnginePageConfigVars =\n    {\n        gitHubPageURL: \"https://github.com/jvp2001/\",\n        imageUrl: \"https://raw.githubusercontent.com/Jvp2001/jvp2001.github.io/main/src/images/\"\n    }\nexport const enginePagesConfig: EnginePagesConfig =\n    {\n        Unity: {\n            pages: [\n                {\n                    name: \"Maze Game\",\n                    link:{ type: \"GitHub\", value: \"MazeGame\"},\n                    image: {\n                        name: \"Unity/Maze.gif\",\n                        style: { size: { width: 200, height: 200}, fit: \"contain\" }\n                    }\n                    \n\n                },\n                {\n                    //TODO: Find the correct Git repo for this\n                    name: \"3D level\",\n                    link: { type: \"GitHub\", value: \"3DLevel\" },\n                    image: {\n                        name: \"Unity/3DGameLevel.gif\",\n                        style: {size: { width: 200, height: 200}, fit: \"contain\"}\n                    }\n                }\n            ],\n            variables: defaultPageVariables,\n            \n        }\n    }","import {enginePagesConfig} from \"./Config\";\n\n// Generate me a regex that finds all console.log statements. The contents of the the log functions could be anything, so we need to use a non-greedy wildcard.\n// const consoleLogRegex = /console\\.log\\((.*?)\\)/g\n\nimport \"../assets/css/main.css\"\n\nlet container: HTMLDivElement\n\n// I cannot get templates to work.\n\n\n\n\nfunction createProjectItem(vars: EnginePageConfigVars, itemInfo: EnginePageProjectConfig)\n{\n    const root = document.createElement(\"div\") as HTMLDivElement\n    root.classList.add(\"col-4\", \"col-12-mobile\")\n    \n    const article = document.createElement(\"article\") as HTMLElement\n    article.classList.add(\"item\")\n    \n    const aTag = document.createElement(\"a\") as HTMLAnchorElement\n    aTag.href = `${vars.gitHubPageURL}/${itemInfo.link.value}`\n    \n    const imgTag =  document.createElement(\"img\") as HTMLImageElement\n    imgTag.src = `${vars.imageUrl}/${itemInfo.image.name}`\n    imgTag.style.width = \"auto\"\n    imgTag.style.height = `${itemInfo.image.style.height}px`\n              imgTag.style.objectFit = itemInfo.image.style.fit ?? \"cover\"\n    const header = document.createElement(\"header\") as HTMLElement\n    \n    const h3Tag = document.createElement(\"h3\") as HTMLHeadingElement\n    h3Tag.textContent = itemInfo.name\n    header.append(h3Tag)\n    \n    aTag.append(imgTag, header)\n    article.append(aTag)\n    root.append(article)\n    \n    return root\n    \n        \n}\n\n\nfunction setupEnginePage(config: EnginePageConfig)\n{\n    console.log(config)\n    const {variables, pages} = config\n    const vars = variables ?? {gitHubPageURL: \"\", imageUrl: \"\"}   satisfies EnginePageConfigVars\n    const row = document.createElement(\"div\") as HTMLDivElement\n    row.classList.add(\"row\")\n    console.log(pages!)\n    for (const page of pages!)\n    {\n        row.append(createProjectItem(vars, page))\n    }\n    console.log(\"Is container valid? \", container != null)\n    container.append(row)\n}\n\n\nfunction onDOMContentLoaded()\n{\n    container = document.querySelector(\"section#portfolio div.container\") as HTMLDivElement\n    console.log(\"Is container valid? \", container != null)\n    setupEnginePage(enginePagesConfig.Unity!)\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", onDOMContentLoaded)\n\n\n"],"names":["$563b46d4f968334c$export$13e12d81112cd245","Unity","pages","name","link","type","value","image","style","size","width","height","fit","variables","gitHubPageURL","imageUrl","$099cc4aee96315fa$var$container","$099cc4aee96315fa$var$createProjectItem","vars","itemInfo","root","document","createElement","classList","add","article","aTag","href","imgTag","src","objectFit","header","h3Tag","textContent","append","addEventListener","querySelector","console","log","config","row","page","$099cc4aee96315fa$var$setupEnginePage"],"version":3,"file":"Unity.6579ac7b.js.map"}